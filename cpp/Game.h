/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Game_H
#define Game_H

#include <thrift/TDispatchProcessor.h>
#include "game_types.h"

namespace pulsegame {

class GameIf {
 public:
  virtual ~GameIf() {}
  virtual void log(const std::string& logLine, const Token tok) = 0;
  virtual void startGame(InitialGame& _return, const std::string& identity) = 0;
  virtual bool op(const Op& operation, const Token tok) = 0;
  virtual void endTurn(State& _return, const Token tok) = 0;
  virtual void surrender(const Token tok) = 0;
};

class GameIfFactory {
 public:
  typedef GameIf Handler;

  virtual ~GameIfFactory() {}

  virtual GameIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(GameIf* /* handler */) = 0;
};

class GameIfSingletonFactory : virtual public GameIfFactory {
 public:
  GameIfSingletonFactory(const boost::shared_ptr<GameIf>& iface) : iface_(iface) {}
  virtual ~GameIfSingletonFactory() {}

  virtual GameIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(GameIf* /* handler */) {}

 protected:
  boost::shared_ptr<GameIf> iface_;
};

class GameNull : virtual public GameIf {
 public:
  virtual ~GameNull() {}
  void log(const std::string& /* logLine */, const Token /* tok */) {
    return;
  }
  void startGame(InitialGame& /* _return */, const std::string& /* identity */) {
    return;
  }
  bool op(const Op& /* operation */, const Token /* tok */) {
    bool _return = false;
    return _return;
  }
  void endTurn(State& /* _return */, const Token /* tok */) {
    return;
  }
  void surrender(const Token /* tok */) {
    return;
  }
};

typedef struct _Game_log_args__isset {
  _Game_log_args__isset() : logLine(false), tok(false) {}
  bool logLine;
  bool tok;
} _Game_log_args__isset;

class Game_log_args {
 public:

  Game_log_args() : logLine(), tok(0) {
  }

  virtual ~Game_log_args() throw() {}

  std::string logLine;
  Token tok;

  _Game_log_args__isset __isset;

  void __set_logLine(const std::string& val) {
    logLine = val;
  }

  void __set_tok(const Token val) {
    tok = val;
  }

  bool operator == (const Game_log_args & rhs) const
  {
    if (!(logLine == rhs.logLine))
      return false;
    if (!(tok == rhs.tok))
      return false;
    return true;
  }
  bool operator != (const Game_log_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Game_log_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Game_log_pargs {
 public:


  virtual ~Game_log_pargs() throw() {}

  const std::string* logLine;
  const Token* tok;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Game_log_result {
 public:

  Game_log_result() {
  }

  virtual ~Game_log_result() throw() {}


  bool operator == (const Game_log_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Game_log_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Game_log_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Game_log_presult {
 public:


  virtual ~Game_log_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Game_startGame_args__isset {
  _Game_startGame_args__isset() : identity(false) {}
  bool identity;
} _Game_startGame_args__isset;

class Game_startGame_args {
 public:

  Game_startGame_args() : identity() {
  }

  virtual ~Game_startGame_args() throw() {}

  std::string identity;

  _Game_startGame_args__isset __isset;

  void __set_identity(const std::string& val) {
    identity = val;
  }

  bool operator == (const Game_startGame_args & rhs) const
  {
    if (!(identity == rhs.identity))
      return false;
    return true;
  }
  bool operator != (const Game_startGame_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Game_startGame_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Game_startGame_pargs {
 public:


  virtual ~Game_startGame_pargs() throw() {}

  const std::string* identity;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Game_startGame_result__isset {
  _Game_startGame_result__isset() : success(false) {}
  bool success;
} _Game_startGame_result__isset;

class Game_startGame_result {
 public:

  Game_startGame_result() {
  }

  virtual ~Game_startGame_result() throw() {}

  InitialGame success;

  _Game_startGame_result__isset __isset;

  void __set_success(const InitialGame& val) {
    success = val;
  }

  bool operator == (const Game_startGame_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Game_startGame_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Game_startGame_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Game_startGame_presult__isset {
  _Game_startGame_presult__isset() : success(false) {}
  bool success;
} _Game_startGame_presult__isset;

class Game_startGame_presult {
 public:


  virtual ~Game_startGame_presult() throw() {}

  InitialGame* success;

  _Game_startGame_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Game_op_args__isset {
  _Game_op_args__isset() : operation(false), tok(false) {}
  bool operation;
  bool tok;
} _Game_op_args__isset;

class Game_op_args {
 public:

  Game_op_args() : tok(0) {
  }

  virtual ~Game_op_args() throw() {}

  Op operation;
  Token tok;

  _Game_op_args__isset __isset;

  void __set_operation(const Op& val) {
    operation = val;
  }

  void __set_tok(const Token val) {
    tok = val;
  }

  bool operator == (const Game_op_args & rhs) const
  {
    if (!(operation == rhs.operation))
      return false;
    if (!(tok == rhs.tok))
      return false;
    return true;
  }
  bool operator != (const Game_op_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Game_op_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Game_op_pargs {
 public:


  virtual ~Game_op_pargs() throw() {}

  const Op* operation;
  const Token* tok;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Game_op_result__isset {
  _Game_op_result__isset() : success(false) {}
  bool success;
} _Game_op_result__isset;

class Game_op_result {
 public:

  Game_op_result() : success(0) {
  }

  virtual ~Game_op_result() throw() {}

  bool success;

  _Game_op_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const Game_op_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Game_op_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Game_op_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Game_op_presult__isset {
  _Game_op_presult__isset() : success(false) {}
  bool success;
} _Game_op_presult__isset;

class Game_op_presult {
 public:


  virtual ~Game_op_presult() throw() {}

  bool* success;

  _Game_op_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Game_endTurn_args__isset {
  _Game_endTurn_args__isset() : tok(false) {}
  bool tok;
} _Game_endTurn_args__isset;

class Game_endTurn_args {
 public:

  Game_endTurn_args() : tok(0) {
  }

  virtual ~Game_endTurn_args() throw() {}

  Token tok;

  _Game_endTurn_args__isset __isset;

  void __set_tok(const Token val) {
    tok = val;
  }

  bool operator == (const Game_endTurn_args & rhs) const
  {
    if (!(tok == rhs.tok))
      return false;
    return true;
  }
  bool operator != (const Game_endTurn_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Game_endTurn_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Game_endTurn_pargs {
 public:


  virtual ~Game_endTurn_pargs() throw() {}

  const Token* tok;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Game_endTurn_result__isset {
  _Game_endTurn_result__isset() : success(false) {}
  bool success;
} _Game_endTurn_result__isset;

class Game_endTurn_result {
 public:

  Game_endTurn_result() {
  }

  virtual ~Game_endTurn_result() throw() {}

  State success;

  _Game_endTurn_result__isset __isset;

  void __set_success(const State& val) {
    success = val;
  }

  bool operator == (const Game_endTurn_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Game_endTurn_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Game_endTurn_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Game_endTurn_presult__isset {
  _Game_endTurn_presult__isset() : success(false) {}
  bool success;
} _Game_endTurn_presult__isset;

class Game_endTurn_presult {
 public:


  virtual ~Game_endTurn_presult() throw() {}

  State* success;

  _Game_endTurn_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Game_surrender_args__isset {
  _Game_surrender_args__isset() : tok(false) {}
  bool tok;
} _Game_surrender_args__isset;

class Game_surrender_args {
 public:

  Game_surrender_args() : tok(0) {
  }

  virtual ~Game_surrender_args() throw() {}

  Token tok;

  _Game_surrender_args__isset __isset;

  void __set_tok(const Token val) {
    tok = val;
  }

  bool operator == (const Game_surrender_args & rhs) const
  {
    if (!(tok == rhs.tok))
      return false;
    return true;
  }
  bool operator != (const Game_surrender_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Game_surrender_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Game_surrender_pargs {
 public:


  virtual ~Game_surrender_pargs() throw() {}

  const Token* tok;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Game_surrender_result {
 public:

  Game_surrender_result() {
  }

  virtual ~Game_surrender_result() throw() {}


  bool operator == (const Game_surrender_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Game_surrender_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Game_surrender_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Game_surrender_presult {
 public:


  virtual ~Game_surrender_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class GameClient : virtual public GameIf {
 public:
  GameClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  GameClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void log(const std::string& logLine, const Token tok);
  void send_log(const std::string& logLine, const Token tok);
  void recv_log();
  void startGame(InitialGame& _return, const std::string& identity);
  void send_startGame(const std::string& identity);
  void recv_startGame(InitialGame& _return);
  bool op(const Op& operation, const Token tok);
  void send_op(const Op& operation, const Token tok);
  bool recv_op();
  void endTurn(State& _return, const Token tok);
  void send_endTurn(const Token tok);
  void recv_endTurn(State& _return);
  void surrender(const Token tok);
  void send_surrender(const Token tok);
  void recv_surrender();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class GameProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<GameIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (GameProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_log(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_startGame(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_op(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_endTurn(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_surrender(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  GameProcessor(boost::shared_ptr<GameIf> iface) :
    iface_(iface) {
    processMap_["log"] = &GameProcessor::process_log;
    processMap_["startGame"] = &GameProcessor::process_startGame;
    processMap_["op"] = &GameProcessor::process_op;
    processMap_["endTurn"] = &GameProcessor::process_endTurn;
    processMap_["surrender"] = &GameProcessor::process_surrender;
  }

  virtual ~GameProcessor() {}
};

class GameProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  GameProcessorFactory(const ::boost::shared_ptr< GameIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< GameIfFactory > handlerFactory_;
};

class GameMultiface : virtual public GameIf {
 public:
  GameMultiface(std::vector<boost::shared_ptr<GameIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~GameMultiface() {}
 protected:
  std::vector<boost::shared_ptr<GameIf> > ifaces_;
  GameMultiface() {}
  void add(boost::shared_ptr<GameIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void log(const std::string& logLine, const Token tok) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->log(logLine, tok);
    }
    ifaces_[i]->log(logLine, tok);
  }

  void startGame(InitialGame& _return, const std::string& identity) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->startGame(_return, identity);
    }
    ifaces_[i]->startGame(_return, identity);
    return;
  }

  bool op(const Op& operation, const Token tok) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->op(operation, tok);
    }
    return ifaces_[i]->op(operation, tok);
  }

  void endTurn(State& _return, const Token tok) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->endTurn(_return, tok);
    }
    ifaces_[i]->endTurn(_return, tok);
    return;
  }

  void surrender(const Token tok) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->surrender(tok);
    }
    ifaces_[i]->surrender(tok);
  }

};

} // namespace

#endif
