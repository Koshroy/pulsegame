/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef game_TYPES_H
#define game_TYPES_H

#include <Thrift.h>
#include <TApplicationException.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>



namespace pulsegame {

struct UnitType {
  enum type {
    TYPE0 = 0,
    TYPE1 = 1,
    TYPE2 = 2,
    BASE = 3
  };
};

extern const std::map<int, const char*> _UnitType_VALUES_TO_NAMES;

struct WeatherCond {
  enum type {
    NORMAL = 0,
    REVERSED = 1,
    DOMINATE = 2,
    WEAK = 3
  };
};

extern const std::map<int, const char*> _WeatherCond_VALUES_TO_NAMES;

struct TileType {
  enum type {
    PLAINS = 0,
    HILL = 1,
    OCEAN = 2
  };
};

extern const std::map<int, const char*> _TileType_VALUES_TO_NAMES;

struct OpType {
  enum type {
    MOVE = 0,
    ATTACK = 1,
    BUY = 2,
    CHECK_WEATHER = 3
  };
};

extern const std::map<int, const char*> _OpType_VALUES_TO_NAMES;

typedef int64_t Token;

typedef struct _Pos__isset {
  _Pos__isset() : y(false), x(false) {}
  bool y;
  bool x;
} _Pos__isset;

class Pos {
 public:

  static const char* ascii_fingerprint; // = "C1241AF5AA92C586B664FD41DC97C576";
  static const uint8_t binary_fingerprint[16]; // = {0xC1,0x24,0x1A,0xF5,0xAA,0x92,0xC5,0x86,0xB6,0x64,0xFD,0x41,0xDC,0x97,0xC5,0x76};

  Pos() : y(0), x(0) {
  }

  virtual ~Pos() throw() {}

  int32_t y;
  int32_t x;

  _Pos__isset __isset;

  void __set_y(const int32_t val) {
    y = val;
    __isset.y = true;
  }

  void __set_x(const int32_t val) {
    x = val;
    __isset.x = true;
  }

  bool operator == (const Pos & rhs) const
  {
    if (__isset.y != rhs.__isset.y)
      return false;
    else if (__isset.y && !(y == rhs.y))
      return false;
    if (__isset.x != rhs.__isset.x)
      return false;
    else if (__isset.x && !(x == rhs.x))
      return false;
    return true;
  }
  bool operator != (const Pos &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Pos & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Unit__isset {
  _Unit__isset() : id(false), type(false), health(false) {}
  bool id;
  bool type;
  bool health;
} _Unit__isset;

class Unit {
 public:

  static const char* ascii_fingerprint; // = "8C8858E5046ACCC78C7CED2E3D90DB5D";
  static const uint8_t binary_fingerprint[16]; // = {0x8C,0x88,0x58,0xE5,0x04,0x6A,0xCC,0xC7,0x8C,0x7C,0xED,0x2E,0x3D,0x90,0xDB,0x5D};

  Unit() : id(0), type((UnitType::type)0), health(0) {
  }

  virtual ~Unit() throw() {}

  int64_t id;
  UnitType::type type;
  int32_t health;

  _Unit__isset __isset;

  void __set_id(const int64_t val) {
    id = val;
    __isset.id = true;
  }

  void __set_type(const UnitType::type val) {
    type = val;
    __isset.type = true;
  }

  void __set_health(const int32_t val) {
    health = val;
    __isset.health = true;
  }

  bool operator == (const Unit & rhs) const
  {
    if (__isset.id != rhs.__isset.id)
      return false;
    else if (__isset.id && !(id == rhs.id))
      return false;
    if (__isset.type != rhs.__isset.type)
      return false;
    else if (__isset.type && !(type == rhs.type))
      return false;
    if (__isset.health != rhs.__isset.health)
      return false;
    else if (__isset.health && !(health == rhs.health))
      return false;
    return true;
  }
  bool operator != (const Unit &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Unit & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UnitPos__isset {
  _UnitPos__isset() : unit(false), pos(false) {}
  bool unit;
  bool pos;
} _UnitPos__isset;

class UnitPos {
 public:

  static const char* ascii_fingerprint; // = "6E2635070F69FED69A7EF528C76781C7";
  static const uint8_t binary_fingerprint[16]; // = {0x6E,0x26,0x35,0x07,0x0F,0x69,0xFE,0xD6,0x9A,0x7E,0xF5,0x28,0xC7,0x67,0x81,0xC7};

  UnitPos() {
  }

  virtual ~UnitPos() throw() {}

  Unit unit;
  Pos pos;

  _UnitPos__isset __isset;

  void __set_unit(const Unit& val) {
    unit = val;
    __isset.unit = true;
  }

  void __set_pos(const Pos& val) {
    pos = val;
    __isset.pos = true;
  }

  bool operator == (const UnitPos & rhs) const
  {
    if (__isset.unit != rhs.__isset.unit)
      return false;
    else if (__isset.unit && !(unit == rhs.unit))
      return false;
    if (__isset.pos != rhs.__isset.pos)
      return false;
    else if (__isset.pos && !(pos == rhs.pos))
      return false;
    return true;
  }
  bool operator != (const UnitPos &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UnitPos & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _WorldState__isset {
  _WorldState__isset() : units(false), bases(false) {}
  bool units;
  bool bases;
} _WorldState__isset;

class WorldState {
 public:

  static const char* ascii_fingerprint; // = "9B5F640C1730D10D7741E9F291E1A7C9";
  static const uint8_t binary_fingerprint[16]; // = {0x9B,0x5F,0x64,0x0C,0x17,0x30,0xD1,0x0D,0x77,0x41,0xE9,0xF2,0x91,0xE1,0xA7,0xC9};

  WorldState() {
  }

  virtual ~WorldState() throw() {}

  std::vector<std::map<int64_t, UnitPos> >  units;
  std::vector<UnitPos>  bases;

  _WorldState__isset __isset;

  void __set_units(const std::vector<std::map<int64_t, UnitPos> > & val) {
    units = val;
    __isset.units = true;
  }

  void __set_bases(const std::vector<UnitPos> & val) {
    bases = val;
    __isset.bases = true;
  }

  bool operator == (const WorldState & rhs) const
  {
    if (__isset.units != rhs.__isset.units)
      return false;
    else if (__isset.units && !(units == rhs.units))
      return false;
    if (__isset.bases != rhs.__isset.bases)
      return false;
    else if (__isset.bases && !(bases == rhs.bases))
      return false;
    return true;
  }
  bool operator != (const WorldState &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WorldState & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _WeatherState__isset {
  _WeatherState__isset() : condition(false), turn(false) {}
  bool condition;
  bool turn;
} _WeatherState__isset;

class WeatherState {
 public:

  static const char* ascii_fingerprint; // = "75971A588272C97A80EBFD5BA7E9F503";
  static const uint8_t binary_fingerprint[16]; // = {0x75,0x97,0x1A,0x58,0x82,0x72,0xC9,0x7A,0x80,0xEB,0xFD,0x5B,0xA7,0xE9,0xF5,0x03};

  WeatherState() : condition((WeatherCond::type)0), turn(0) {
  }

  virtual ~WeatherState() throw() {}

  WeatherCond::type condition;
  int32_t turn;

  _WeatherState__isset __isset;

  void __set_condition(const WeatherCond::type val) {
    condition = val;
    __isset.condition = true;
  }

  void __set_turn(const int32_t val) {
    turn = val;
    __isset.turn = true;
  }

  bool operator == (const WeatherState & rhs) const
  {
    if (__isset.condition != rhs.__isset.condition)
      return false;
    else if (__isset.condition && !(condition == rhs.condition))
      return false;
    if (__isset.turn != rhs.__isset.turn)
      return false;
    else if (__isset.turn && !(turn == rhs.turn))
      return false;
    return true;
  }
  bool operator != (const WeatherState &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WeatherState & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UserState__isset {
  _UserState__isset() : queueLen(false), lastValidOps(false), lastInvalidOps(false), gold(false), weather(false) {}
  bool queueLen;
  bool lastValidOps;
  bool lastInvalidOps;
  bool gold;
  bool weather;
} _UserState__isset;

class UserState {
 public:

  static const char* ascii_fingerprint; // = "06627DF28001C5F7C9FEADD786C258F7";
  static const uint8_t binary_fingerprint[16]; // = {0x06,0x62,0x7D,0xF2,0x80,0x01,0xC5,0xF7,0xC9,0xFE,0xAD,0xD7,0x86,0xC2,0x58,0xF7};

  UserState() : queueLen(0), lastValidOps(0), lastInvalidOps(0), gold(0) {
  }

  virtual ~UserState() throw() {}

  int32_t queueLen;
  int32_t lastValidOps;
  int32_t lastInvalidOps;
  int32_t gold;
  WeatherState weather;

  _UserState__isset __isset;

  void __set_queueLen(const int32_t val) {
    queueLen = val;
    __isset.queueLen = true;
  }

  void __set_lastValidOps(const int32_t val) {
    lastValidOps = val;
    __isset.lastValidOps = true;
  }

  void __set_lastInvalidOps(const int32_t val) {
    lastInvalidOps = val;
    __isset.lastInvalidOps = true;
  }

  void __set_gold(const int32_t val) {
    gold = val;
    __isset.gold = true;
  }

  void __set_weather(const WeatherState& val) {
    weather = val;
    __isset.weather = true;
  }

  bool operator == (const UserState & rhs) const
  {
    if (__isset.queueLen != rhs.__isset.queueLen)
      return false;
    else if (__isset.queueLen && !(queueLen == rhs.queueLen))
      return false;
    if (__isset.lastValidOps != rhs.__isset.lastValidOps)
      return false;
    else if (__isset.lastValidOps && !(lastValidOps == rhs.lastValidOps))
      return false;
    if (__isset.lastInvalidOps != rhs.__isset.lastInvalidOps)
      return false;
    else if (__isset.lastInvalidOps && !(lastInvalidOps == rhs.lastInvalidOps))
      return false;
    if (__isset.gold != rhs.__isset.gold)
      return false;
    else if (__isset.gold && !(gold == rhs.gold))
      return false;
    if (__isset.weather != rhs.__isset.weather)
      return false;
    else if (__isset.weather && !(weather == rhs.weather))
      return false;
    return true;
  }
  bool operator != (const UserState &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserState & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _State__isset {
  _State__isset() : world(false), turnNum(false), user(false), hasLost(false), itsOn(false) {}
  bool world;
  bool turnNum;
  bool user;
  bool hasLost;
  bool itsOn;
} _State__isset;

class State {
 public:

  static const char* ascii_fingerprint; // = "0EC1A936C39564CDC2AA83136CECF9EB";
  static const uint8_t binary_fingerprint[16]; // = {0x0E,0xC1,0xA9,0x36,0xC3,0x95,0x64,0xCD,0xC2,0xAA,0x83,0x13,0x6C,0xEC,0xF9,0xEB};

  State() : turnNum(0), itsOn(0) {
  }

  virtual ~State() throw() {}

  WorldState world;
  int32_t turnNum;
  UserState user;
  std::vector<bool>  hasLost;
  bool itsOn;

  _State__isset __isset;

  void __set_world(const WorldState& val) {
    world = val;
    __isset.world = true;
  }

  void __set_turnNum(const int32_t val) {
    turnNum = val;
    __isset.turnNum = true;
  }

  void __set_user(const UserState& val) {
    user = val;
    __isset.user = true;
  }

  void __set_hasLost(const std::vector<bool> & val) {
    hasLost = val;
    __isset.hasLost = true;
  }

  void __set_itsOn(const bool val) {
    itsOn = val;
    __isset.itsOn = true;
  }

  bool operator == (const State & rhs) const
  {
    if (__isset.world != rhs.__isset.world)
      return false;
    else if (__isset.world && !(world == rhs.world))
      return false;
    if (__isset.turnNum != rhs.__isset.turnNum)
      return false;
    else if (__isset.turnNum && !(turnNum == rhs.turnNum))
      return false;
    if (__isset.user != rhs.__isset.user)
      return false;
    else if (__isset.user && !(user == rhs.user))
      return false;
    if (__isset.hasLost != rhs.__isset.hasLost)
      return false;
    else if (__isset.hasLost && !(hasLost == rhs.hasLost))
      return false;
    if (__isset.itsOn != rhs.__isset.itsOn)
      return false;
    else if (__isset.itsOn && !(itsOn == rhs.itsOn))
      return false;
    return true;
  }
  bool operator != (const State &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const State & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameMap__isset {
  _GameMap__isset() : tiles(false), occupied(false), height(false), width(false) {}
  bool tiles;
  bool occupied;
  bool height;
  bool width;
} _GameMap__isset;

class GameMap {
 public:

  static const char* ascii_fingerprint; // = "DE4291DD16FC9A2ABBC51CF1C50A6C36";
  static const uint8_t binary_fingerprint[16]; // = {0xDE,0x42,0x91,0xDD,0x16,0xFC,0x9A,0x2A,0xBB,0xC5,0x1C,0xF1,0xC5,0x0A,0x6C,0x36};

  GameMap() : height(0), width(0) {
  }

  virtual ~GameMap() throw() {}

  std::vector<std::vector<TileType::type> >  tiles;
  std::vector<std::vector<bool> >  occupied;
  int32_t height;
  int32_t width;

  _GameMap__isset __isset;

  void __set_tiles(const std::vector<std::vector<TileType::type> > & val) {
    tiles = val;
    __isset.tiles = true;
  }

  void __set_occupied(const std::vector<std::vector<bool> > & val) {
    occupied = val;
    __isset.occupied = true;
  }

  void __set_height(const int32_t val) {
    height = val;
    __isset.height = true;
  }

  void __set_width(const int32_t val) {
    width = val;
    __isset.width = true;
  }

  bool operator == (const GameMap & rhs) const
  {
    if (__isset.tiles != rhs.__isset.tiles)
      return false;
    else if (__isset.tiles && !(tiles == rhs.tiles))
      return false;
    if (__isset.occupied != rhs.__isset.occupied)
      return false;
    else if (__isset.occupied && !(occupied == rhs.occupied))
      return false;
    if (__isset.height != rhs.__isset.height)
      return false;
    else if (__isset.height && !(height == rhs.height))
      return false;
    if (__isset.width != rhs.__isset.width)
      return false;
    else if (__isset.width && !(width == rhs.width))
      return false;
    return true;
  }
  bool operator != (const GameMap &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameMap & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InitialGame__isset {
  _InitialGame__isset() : tok(false), state(false), pid(false), gameMap(false) {}
  bool tok;
  bool state;
  bool pid;
  bool gameMap;
} _InitialGame__isset;

class InitialGame {
 public:

  static const char* ascii_fingerprint; // = "905D3458AB58DD6F684E84411023D83E";
  static const uint8_t binary_fingerprint[16]; // = {0x90,0x5D,0x34,0x58,0xAB,0x58,0xDD,0x6F,0x68,0x4E,0x84,0x41,0x10,0x23,0xD8,0x3E};

  InitialGame() : tok(0), pid(0) {
  }

  virtual ~InitialGame() throw() {}

  Token tok;
  State state;
  int32_t pid;
  GameMap gameMap;

  _InitialGame__isset __isset;

  void __set_tok(const Token val) {
    tok = val;
    __isset.tok = true;
  }

  void __set_state(const State& val) {
    state = val;
    __isset.state = true;
  }

  void __set_pid(const int32_t val) {
    pid = val;
    __isset.pid = true;
  }

  void __set_gameMap(const GameMap& val) {
    gameMap = val;
    __isset.gameMap = true;
  }

  bool operator == (const InitialGame & rhs) const
  {
    if (__isset.tok != rhs.__isset.tok)
      return false;
    else if (__isset.tok && !(tok == rhs.tok))
      return false;
    if (__isset.state != rhs.__isset.state)
      return false;
    else if (__isset.state && !(state == rhs.state))
      return false;
    if (__isset.pid != rhs.__isset.pid)
      return false;
    else if (__isset.pid && !(pid == rhs.pid))
      return false;
    if (__isset.gameMap != rhs.__isset.gameMap)
      return false;
    else if (__isset.gameMap && !(gameMap == rhs.gameMap))
      return false;
    return true;
  }
  bool operator != (const InitialGame &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InitialGame & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MoveOp__isset {
  _MoveOp__isset() : unit(false), destination(false) {}
  bool unit;
  bool destination;
} _MoveOp__isset;

class MoveOp {
 public:

  static const char* ascii_fingerprint; // = "6E2635070F69FED69A7EF528C76781C7";
  static const uint8_t binary_fingerprint[16]; // = {0x6E,0x26,0x35,0x07,0x0F,0x69,0xFE,0xD6,0x9A,0x7E,0xF5,0x28,0xC7,0x67,0x81,0xC7};

  MoveOp() {
  }

  virtual ~MoveOp() throw() {}

  Unit unit;
  Pos destination;

  _MoveOp__isset __isset;

  void __set_unit(const Unit& val) {
    unit = val;
    __isset.unit = true;
  }

  void __set_destination(const Pos& val) {
    destination = val;
    __isset.destination = true;
  }

  bool operator == (const MoveOp & rhs) const
  {
    if (__isset.unit != rhs.__isset.unit)
      return false;
    else if (__isset.unit && !(unit == rhs.unit))
      return false;
    if (__isset.destination != rhs.__isset.destination)
      return false;
    else if (__isset.destination && !(destination == rhs.destination))
      return false;
    return true;
  }
  bool operator != (const MoveOp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MoveOp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AttackOp__isset {
  _AttackOp__isset() : attacker(false), enemy(false) {}
  bool attacker;
  bool enemy;
} _AttackOp__isset;

class AttackOp {
 public:

  static const char* ascii_fingerprint; // = "339ECDFED1577414E7CECA45E2287910";
  static const uint8_t binary_fingerprint[16]; // = {0x33,0x9E,0xCD,0xFE,0xD1,0x57,0x74,0x14,0xE7,0xCE,0xCA,0x45,0xE2,0x28,0x79,0x10};

  AttackOp() {
  }

  virtual ~AttackOp() throw() {}

  Unit attacker;
  Unit enemy;

  _AttackOp__isset __isset;

  void __set_attacker(const Unit& val) {
    attacker = val;
    __isset.attacker = true;
  }

  void __set_enemy(const Unit& val) {
    enemy = val;
    __isset.enemy = true;
  }

  bool operator == (const AttackOp & rhs) const
  {
    if (__isset.attacker != rhs.__isset.attacker)
      return false;
    else if (__isset.attacker && !(attacker == rhs.attacker))
      return false;
    if (__isset.enemy != rhs.__isset.enemy)
      return false;
    else if (__isset.enemy && !(enemy == rhs.enemy))
      return false;
    return true;
  }
  bool operator != (const AttackOp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AttackOp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BuyOp__isset {
  _BuyOp__isset() : type(false), startPos(false) {}
  bool type;
  bool startPos;
} _BuyOp__isset;

class BuyOp {
 public:

  static const char* ascii_fingerprint; // = "275AD736456F20EBB896774FE6B08B81";
  static const uint8_t binary_fingerprint[16]; // = {0x27,0x5A,0xD7,0x36,0x45,0x6F,0x20,0xEB,0xB8,0x96,0x77,0x4F,0xE6,0xB0,0x8B,0x81};

  BuyOp() : type((UnitType::type)0) {
  }

  virtual ~BuyOp() throw() {}

  UnitType::type type;
  Pos startPos;

  _BuyOp__isset __isset;

  void __set_type(const UnitType::type val) {
    type = val;
    __isset.type = true;
  }

  void __set_startPos(const Pos& val) {
    startPos = val;
    __isset.startPos = true;
  }

  bool operator == (const BuyOp & rhs) const
  {
    if (__isset.type != rhs.__isset.type)
      return false;
    else if (__isset.type && !(type == rhs.type))
      return false;
    if (__isset.startPos != rhs.__isset.startPos)
      return false;
    else if (__isset.startPos && !(startPos == rhs.startPos))
      return false;
    return true;
  }
  bool operator != (const BuyOp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BuyOp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Op__isset {
  _Op__isset() : type(false), move(false), attack(false), buy(false) {}
  bool type;
  bool move;
  bool attack;
  bool buy;
} _Op__isset;

class Op {
 public:

  static const char* ascii_fingerprint; // = "0931A7E723602E5F931A1B48E7C4AAD1";
  static const uint8_t binary_fingerprint[16]; // = {0x09,0x31,0xA7,0xE7,0x23,0x60,0x2E,0x5F,0x93,0x1A,0x1B,0x48,0xE7,0xC4,0xAA,0xD1};

  Op() : type((OpType::type)0) {
  }

  virtual ~Op() throw() {}

  OpType::type type;
  MoveOp move;
  AttackOp attack;
  BuyOp buy;

  _Op__isset __isset;

  void __set_type(const OpType::type val) {
    type = val;
    __isset.type = true;
  }

  void __set_move(const MoveOp& val) {
    move = val;
    __isset.move = true;
  }

  void __set_attack(const AttackOp& val) {
    attack = val;
    __isset.attack = true;
  }

  void __set_buy(const BuyOp& val) {
    buy = val;
    __isset.buy = true;
  }

  bool operator == (const Op & rhs) const
  {
    if (__isset.type != rhs.__isset.type)
      return false;
    else if (__isset.type && !(type == rhs.type))
      return false;
    if (__isset.move != rhs.__isset.move)
      return false;
    else if (__isset.move && !(move == rhs.move))
      return false;
    if (__isset.attack != rhs.__isset.attack)
      return false;
    else if (__isset.attack && !(attack == rhs.attack))
      return false;
    if (__isset.buy != rhs.__isset.buy)
      return false;
    else if (__isset.buy && !(buy == rhs.buy))
      return false;
    return true;
  }
  bool operator != (const Op &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Op & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

} // namespace

#endif
