/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.illinois.ece.pulsegame;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Captures user-specific state; this is stuff you see about yourself but not
 * about the opponent. Includes redundant info about the last turn that might be
 * useful; how many ops were valid and how many were invalid. Sum of these two
 * is length of submitted queue and queueLen = maxQueueLen - 0.5 *
 * lastInvalidOps.
 */
public class UserState implements org.apache.thrift.TBase<UserState, UserState._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UserState");

  private static final org.apache.thrift.protocol.TField QUEUE_LEN_FIELD_DESC = new org.apache.thrift.protocol.TField("queueLen", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField LAST_VALID_OPS_FIELD_DESC = new org.apache.thrift.protocol.TField("lastValidOps", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField LAST_INVALID_OPS_FIELD_DESC = new org.apache.thrift.protocol.TField("lastInvalidOps", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField GOLD_FIELD_DESC = new org.apache.thrift.protocol.TField("gold", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField WEATHER_FIELD_DESC = new org.apache.thrift.protocol.TField("weather", org.apache.thrift.protocol.TType.STRUCT, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UserStateStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UserStateTupleSchemeFactory());
  }

  /**
   * the queue length for this turn
   */
  public int queueLen; // optional
  public int lastValidOps; // optional
  public int lastInvalidOps; // optional
  public int gold; // optional
  /**
   * This is your view of the weather. Depending on what you do, it could be
   * more or less up-to-date than your opponents.
   */
  public WeatherState weather; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * the queue length for this turn
     */
    QUEUE_LEN((short)1, "queueLen"),
    LAST_VALID_OPS((short)2, "lastValidOps"),
    LAST_INVALID_OPS((short)3, "lastInvalidOps"),
    GOLD((short)4, "gold"),
    /**
     * This is your view of the weather. Depending on what you do, it could be
     * more or less up-to-date than your opponents.
     */
    WEATHER((short)5, "weather");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // QUEUE_LEN
          return QUEUE_LEN;
        case 2: // LAST_VALID_OPS
          return LAST_VALID_OPS;
        case 3: // LAST_INVALID_OPS
          return LAST_INVALID_OPS;
        case 4: // GOLD
          return GOLD;
        case 5: // WEATHER
          return WEATHER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __QUEUELEN_ISSET_ID = 0;
  private static final int __LASTVALIDOPS_ISSET_ID = 1;
  private static final int __LASTINVALIDOPS_ISSET_ID = 2;
  private static final int __GOLD_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.QUEUE_LEN,_Fields.LAST_VALID_OPS,_Fields.LAST_INVALID_OPS,_Fields.GOLD,_Fields.WEATHER};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.QUEUE_LEN, new org.apache.thrift.meta_data.FieldMetaData("queueLen", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LAST_VALID_OPS, new org.apache.thrift.meta_data.FieldMetaData("lastValidOps", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LAST_INVALID_OPS, new org.apache.thrift.meta_data.FieldMetaData("lastInvalidOps", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.GOLD, new org.apache.thrift.meta_data.FieldMetaData("gold", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WEATHER, new org.apache.thrift.meta_data.FieldMetaData("weather", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, WeatherState.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserState.class, metaDataMap);
  }

  public UserState() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UserState(UserState other) {
    __isset_bitfield = other.__isset_bitfield;
    this.queueLen = other.queueLen;
    this.lastValidOps = other.lastValidOps;
    this.lastInvalidOps = other.lastInvalidOps;
    this.gold = other.gold;
    if (other.isSetWeather()) {
      this.weather = new WeatherState(other.weather);
    }
  }

  public UserState deepCopy() {
    return new UserState(this);
  }

  @Override
  public void clear() {
    setQueueLenIsSet(false);
    this.queueLen = 0;
    setLastValidOpsIsSet(false);
    this.lastValidOps = 0;
    setLastInvalidOpsIsSet(false);
    this.lastInvalidOps = 0;
    setGoldIsSet(false);
    this.gold = 0;
    this.weather = null;
  }

  /**
   * the queue length for this turn
   */
  public int getQueueLen() {
    return this.queueLen;
  }

  /**
   * the queue length for this turn
   */
  public UserState setQueueLen(int queueLen) {
    this.queueLen = queueLen;
    setQueueLenIsSet(true);
    return this;
  }

  public void unsetQueueLen() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QUEUELEN_ISSET_ID);
  }

  /** Returns true if field queueLen is set (has been assigned a value) and false otherwise */
  public boolean isSetQueueLen() {
    return EncodingUtils.testBit(__isset_bitfield, __QUEUELEN_ISSET_ID);
  }

  public void setQueueLenIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QUEUELEN_ISSET_ID, value);
  }

  public int getLastValidOps() {
    return this.lastValidOps;
  }

  public UserState setLastValidOps(int lastValidOps) {
    this.lastValidOps = lastValidOps;
    setLastValidOpsIsSet(true);
    return this;
  }

  public void unsetLastValidOps() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTVALIDOPS_ISSET_ID);
  }

  /** Returns true if field lastValidOps is set (has been assigned a value) and false otherwise */
  public boolean isSetLastValidOps() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTVALIDOPS_ISSET_ID);
  }

  public void setLastValidOpsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTVALIDOPS_ISSET_ID, value);
  }

  public int getLastInvalidOps() {
    return this.lastInvalidOps;
  }

  public UserState setLastInvalidOps(int lastInvalidOps) {
    this.lastInvalidOps = lastInvalidOps;
    setLastInvalidOpsIsSet(true);
    return this;
  }

  public void unsetLastInvalidOps() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTINVALIDOPS_ISSET_ID);
  }

  /** Returns true if field lastInvalidOps is set (has been assigned a value) and false otherwise */
  public boolean isSetLastInvalidOps() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTINVALIDOPS_ISSET_ID);
  }

  public void setLastInvalidOpsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTINVALIDOPS_ISSET_ID, value);
  }

  public int getGold() {
    return this.gold;
  }

  public UserState setGold(int gold) {
    this.gold = gold;
    setGoldIsSet(true);
    return this;
  }

  public void unsetGold() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GOLD_ISSET_ID);
  }

  /** Returns true if field gold is set (has been assigned a value) and false otherwise */
  public boolean isSetGold() {
    return EncodingUtils.testBit(__isset_bitfield, __GOLD_ISSET_ID);
  }

  public void setGoldIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GOLD_ISSET_ID, value);
  }

  /**
   * This is your view of the weather. Depending on what you do, it could be
   * more or less up-to-date than your opponents.
   */
  public WeatherState getWeather() {
    return this.weather;
  }

  /**
   * This is your view of the weather. Depending on what you do, it could be
   * more or less up-to-date than your opponents.
   */
  public UserState setWeather(WeatherState weather) {
    this.weather = weather;
    return this;
  }

  public void unsetWeather() {
    this.weather = null;
  }

  /** Returns true if field weather is set (has been assigned a value) and false otherwise */
  public boolean isSetWeather() {
    return this.weather != null;
  }

  public void setWeatherIsSet(boolean value) {
    if (!value) {
      this.weather = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case QUEUE_LEN:
      if (value == null) {
        unsetQueueLen();
      } else {
        setQueueLen((Integer)value);
      }
      break;

    case LAST_VALID_OPS:
      if (value == null) {
        unsetLastValidOps();
      } else {
        setLastValidOps((Integer)value);
      }
      break;

    case LAST_INVALID_OPS:
      if (value == null) {
        unsetLastInvalidOps();
      } else {
        setLastInvalidOps((Integer)value);
      }
      break;

    case GOLD:
      if (value == null) {
        unsetGold();
      } else {
        setGold((Integer)value);
      }
      break;

    case WEATHER:
      if (value == null) {
        unsetWeather();
      } else {
        setWeather((WeatherState)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case QUEUE_LEN:
      return Integer.valueOf(getQueueLen());

    case LAST_VALID_OPS:
      return Integer.valueOf(getLastValidOps());

    case LAST_INVALID_OPS:
      return Integer.valueOf(getLastInvalidOps());

    case GOLD:
      return Integer.valueOf(getGold());

    case WEATHER:
      return getWeather();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case QUEUE_LEN:
      return isSetQueueLen();
    case LAST_VALID_OPS:
      return isSetLastValidOps();
    case LAST_INVALID_OPS:
      return isSetLastInvalidOps();
    case GOLD:
      return isSetGold();
    case WEATHER:
      return isSetWeather();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UserState)
      return this.equals((UserState)that);
    return false;
  }

  public boolean equals(UserState that) {
    if (that == null)
      return false;

    boolean this_present_queueLen = true && this.isSetQueueLen();
    boolean that_present_queueLen = true && that.isSetQueueLen();
    if (this_present_queueLen || that_present_queueLen) {
      if (!(this_present_queueLen && that_present_queueLen))
        return false;
      if (this.queueLen != that.queueLen)
        return false;
    }

    boolean this_present_lastValidOps = true && this.isSetLastValidOps();
    boolean that_present_lastValidOps = true && that.isSetLastValidOps();
    if (this_present_lastValidOps || that_present_lastValidOps) {
      if (!(this_present_lastValidOps && that_present_lastValidOps))
        return false;
      if (this.lastValidOps != that.lastValidOps)
        return false;
    }

    boolean this_present_lastInvalidOps = true && this.isSetLastInvalidOps();
    boolean that_present_lastInvalidOps = true && that.isSetLastInvalidOps();
    if (this_present_lastInvalidOps || that_present_lastInvalidOps) {
      if (!(this_present_lastInvalidOps && that_present_lastInvalidOps))
        return false;
      if (this.lastInvalidOps != that.lastInvalidOps)
        return false;
    }

    boolean this_present_gold = true && this.isSetGold();
    boolean that_present_gold = true && that.isSetGold();
    if (this_present_gold || that_present_gold) {
      if (!(this_present_gold && that_present_gold))
        return false;
      if (this.gold != that.gold)
        return false;
    }

    boolean this_present_weather = true && this.isSetWeather();
    boolean that_present_weather = true && that.isSetWeather();
    if (this_present_weather || that_present_weather) {
      if (!(this_present_weather && that_present_weather))
        return false;
      if (!this.weather.equals(that.weather))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(UserState other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    UserState typedOther = (UserState)other;

    lastComparison = Boolean.valueOf(isSetQueueLen()).compareTo(typedOther.isSetQueueLen());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueueLen()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queueLen, typedOther.queueLen);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastValidOps()).compareTo(typedOther.isSetLastValidOps());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastValidOps()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastValidOps, typedOther.lastValidOps);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastInvalidOps()).compareTo(typedOther.isSetLastInvalidOps());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastInvalidOps()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastInvalidOps, typedOther.lastInvalidOps);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGold()).compareTo(typedOther.isSetGold());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGold()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gold, typedOther.gold);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWeather()).compareTo(typedOther.isSetWeather());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWeather()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.weather, typedOther.weather);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("UserState(");
    boolean first = true;

    if (isSetQueueLen()) {
      sb.append("queueLen:");
      sb.append(this.queueLen);
      first = false;
    }
    if (isSetLastValidOps()) {
      if (!first) sb.append(", ");
      sb.append("lastValidOps:");
      sb.append(this.lastValidOps);
      first = false;
    }
    if (isSetLastInvalidOps()) {
      if (!first) sb.append(", ");
      sb.append("lastInvalidOps:");
      sb.append(this.lastInvalidOps);
      first = false;
    }
    if (isSetGold()) {
      if (!first) sb.append(", ");
      sb.append("gold:");
      sb.append(this.gold);
      first = false;
    }
    if (isSetWeather()) {
      if (!first) sb.append(", ");
      sb.append("weather:");
      if (this.weather == null) {
        sb.append("null");
      } else {
        sb.append(this.weather);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (weather != null) {
      weather.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserStateStandardSchemeFactory implements SchemeFactory {
    public UserStateStandardScheme getScheme() {
      return new UserStateStandardScheme();
    }
  }

  private static class UserStateStandardScheme extends StandardScheme<UserState> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UserState struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // QUEUE_LEN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.queueLen = iprot.readI32();
              struct.setQueueLenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LAST_VALID_OPS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.lastValidOps = iprot.readI32();
              struct.setLastValidOpsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LAST_INVALID_OPS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.lastInvalidOps = iprot.readI32();
              struct.setLastInvalidOpsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // GOLD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.gold = iprot.readI32();
              struct.setGoldIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // WEATHER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.weather = new WeatherState();
              struct.weather.read(iprot);
              struct.setWeatherIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UserState struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetQueueLen()) {
        oprot.writeFieldBegin(QUEUE_LEN_FIELD_DESC);
        oprot.writeI32(struct.queueLen);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLastValidOps()) {
        oprot.writeFieldBegin(LAST_VALID_OPS_FIELD_DESC);
        oprot.writeI32(struct.lastValidOps);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLastInvalidOps()) {
        oprot.writeFieldBegin(LAST_INVALID_OPS_FIELD_DESC);
        oprot.writeI32(struct.lastInvalidOps);
        oprot.writeFieldEnd();
      }
      if (struct.isSetGold()) {
        oprot.writeFieldBegin(GOLD_FIELD_DESC);
        oprot.writeI32(struct.gold);
        oprot.writeFieldEnd();
      }
      if (struct.weather != null) {
        if (struct.isSetWeather()) {
          oprot.writeFieldBegin(WEATHER_FIELD_DESC);
          struct.weather.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserStateTupleSchemeFactory implements SchemeFactory {
    public UserStateTupleScheme getScheme() {
      return new UserStateTupleScheme();
    }
  }

  private static class UserStateTupleScheme extends TupleScheme<UserState> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UserState struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetQueueLen()) {
        optionals.set(0);
      }
      if (struct.isSetLastValidOps()) {
        optionals.set(1);
      }
      if (struct.isSetLastInvalidOps()) {
        optionals.set(2);
      }
      if (struct.isSetGold()) {
        optionals.set(3);
      }
      if (struct.isSetWeather()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetQueueLen()) {
        oprot.writeI32(struct.queueLen);
      }
      if (struct.isSetLastValidOps()) {
        oprot.writeI32(struct.lastValidOps);
      }
      if (struct.isSetLastInvalidOps()) {
        oprot.writeI32(struct.lastInvalidOps);
      }
      if (struct.isSetGold()) {
        oprot.writeI32(struct.gold);
      }
      if (struct.isSetWeather()) {
        struct.weather.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UserState struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.queueLen = iprot.readI32();
        struct.setQueueLenIsSet(true);
      }
      if (incoming.get(1)) {
        struct.lastValidOps = iprot.readI32();
        struct.setLastValidOpsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.lastInvalidOps = iprot.readI32();
        struct.setLastInvalidOpsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.gold = iprot.readI32();
        struct.setGoldIsSet(true);
      }
      if (incoming.get(4)) {
        struct.weather = new WeatherState();
        struct.weather.read(iprot);
        struct.setWeatherIsSet(true);
      }
    }
  }

}

