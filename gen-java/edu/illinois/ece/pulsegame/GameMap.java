/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.illinois.ece.pulsegame;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class GameMap implements org.apache.thrift.TBase<GameMap, GameMap._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GameMap");

  private static final org.apache.thrift.protocol.TField TILES_FIELD_DESC = new org.apache.thrift.protocol.TField("tiles", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField OCCUPIED_FIELD_DESC = new org.apache.thrift.protocol.TField("occupied", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField HEIGHT_FIELD_DESC = new org.apache.thrift.protocol.TField("height", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField WIDTH_FIELD_DESC = new org.apache.thrift.protocol.TField("width", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GameMapStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GameMapTupleSchemeFactory());
  }

  public List<List<TileType>> tiles; // optional
  /**
   * Units cannot stack at all, so use this array to avoid submitting move
   * operations that fail since someone is already there.
   */
  public List<List<Boolean>> occupied; // optional
  /**
   * the first dimension of tiles
   */
  public int height; // optional
  /**
   * the second dimension of tiles
   */
  public int width; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TILES((short)1, "tiles"),
    /**
     * Units cannot stack at all, so use this array to avoid submitting move
     * operations that fail since someone is already there.
     */
    OCCUPIED((short)2, "occupied"),
    /**
     * the first dimension of tiles
     */
    HEIGHT((short)3, "height"),
    /**
     * the second dimension of tiles
     */
    WIDTH((short)4, "width");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TILES
          return TILES;
        case 2: // OCCUPIED
          return OCCUPIED;
        case 3: // HEIGHT
          return HEIGHT;
        case 4: // WIDTH
          return WIDTH;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __HEIGHT_ISSET_ID = 0;
  private static final int __WIDTH_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.TILES,_Fields.OCCUPIED,_Fields.HEIGHT,_Fields.WIDTH};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TILES, new org.apache.thrift.meta_data.FieldMetaData("tiles", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TileType.class)))));
    tmpMap.put(_Fields.OCCUPIED, new org.apache.thrift.meta_data.FieldMetaData("occupied", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)))));
    tmpMap.put(_Fields.HEIGHT, new org.apache.thrift.meta_data.FieldMetaData("height", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WIDTH, new org.apache.thrift.meta_data.FieldMetaData("width", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GameMap.class, metaDataMap);
  }

  public GameMap() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GameMap(GameMap other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTiles()) {
      List<List<TileType>> __this__tiles = new ArrayList<List<TileType>>();
      for (List<TileType> other_element : other.tiles) {
        List<TileType> __this__tiles_copy = new ArrayList<TileType>();
        for (TileType other_element_element : other_element) {
          __this__tiles_copy.add(other_element_element);
        }
        __this__tiles.add(__this__tiles_copy);
      }
      this.tiles = __this__tiles;
    }
    if (other.isSetOccupied()) {
      List<List<Boolean>> __this__occupied = new ArrayList<List<Boolean>>();
      for (List<Boolean> other_element : other.occupied) {
        List<Boolean> __this__occupied_copy = new ArrayList<Boolean>();
        for (Boolean other_element_element : other_element) {
          __this__occupied_copy.add(other_element_element);
        }
        __this__occupied.add(__this__occupied_copy);
      }
      this.occupied = __this__occupied;
    }
    this.height = other.height;
    this.width = other.width;
  }

  public GameMap deepCopy() {
    return new GameMap(this);
  }

  @Override
  public void clear() {
    this.tiles = null;
    this.occupied = null;
    setHeightIsSet(false);
    this.height = 0;
    setWidthIsSet(false);
    this.width = 0;
  }

  public int getTilesSize() {
    return (this.tiles == null) ? 0 : this.tiles.size();
  }

  public java.util.Iterator<List<TileType>> getTilesIterator() {
    return (this.tiles == null) ? null : this.tiles.iterator();
  }

  public void addToTiles(List<TileType> elem) {
    if (this.tiles == null) {
      this.tiles = new ArrayList<List<TileType>>();
    }
    this.tiles.add(elem);
  }

  public List<List<TileType>> getTiles() {
    return this.tiles;
  }

  public GameMap setTiles(List<List<TileType>> tiles) {
    this.tiles = tiles;
    return this;
  }

  public void unsetTiles() {
    this.tiles = null;
  }

  /** Returns true if field tiles is set (has been assigned a value) and false otherwise */
  public boolean isSetTiles() {
    return this.tiles != null;
  }

  public void setTilesIsSet(boolean value) {
    if (!value) {
      this.tiles = null;
    }
  }

  public int getOccupiedSize() {
    return (this.occupied == null) ? 0 : this.occupied.size();
  }

  public java.util.Iterator<List<Boolean>> getOccupiedIterator() {
    return (this.occupied == null) ? null : this.occupied.iterator();
  }

  public void addToOccupied(List<Boolean> elem) {
    if (this.occupied == null) {
      this.occupied = new ArrayList<List<Boolean>>();
    }
    this.occupied.add(elem);
  }

  /**
   * Units cannot stack at all, so use this array to avoid submitting move
   * operations that fail since someone is already there.
   */
  public List<List<Boolean>> getOccupied() {
    return this.occupied;
  }

  /**
   * Units cannot stack at all, so use this array to avoid submitting move
   * operations that fail since someone is already there.
   */
  public GameMap setOccupied(List<List<Boolean>> occupied) {
    this.occupied = occupied;
    return this;
  }

  public void unsetOccupied() {
    this.occupied = null;
  }

  /** Returns true if field occupied is set (has been assigned a value) and false otherwise */
  public boolean isSetOccupied() {
    return this.occupied != null;
  }

  public void setOccupiedIsSet(boolean value) {
    if (!value) {
      this.occupied = null;
    }
  }

  /**
   * the first dimension of tiles
   */
  public int getHeight() {
    return this.height;
  }

  /**
   * the first dimension of tiles
   */
  public GameMap setHeight(int height) {
    this.height = height;
    setHeightIsSet(true);
    return this;
  }

  public void unsetHeight() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HEIGHT_ISSET_ID);
  }

  /** Returns true if field height is set (has been assigned a value) and false otherwise */
  public boolean isSetHeight() {
    return EncodingUtils.testBit(__isset_bitfield, __HEIGHT_ISSET_ID);
  }

  public void setHeightIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HEIGHT_ISSET_ID, value);
  }

  /**
   * the second dimension of tiles
   */
  public int getWidth() {
    return this.width;
  }

  /**
   * the second dimension of tiles
   */
  public GameMap setWidth(int width) {
    this.width = width;
    setWidthIsSet(true);
    return this;
  }

  public void unsetWidth() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WIDTH_ISSET_ID);
  }

  /** Returns true if field width is set (has been assigned a value) and false otherwise */
  public boolean isSetWidth() {
    return EncodingUtils.testBit(__isset_bitfield, __WIDTH_ISSET_ID);
  }

  public void setWidthIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WIDTH_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TILES:
      if (value == null) {
        unsetTiles();
      } else {
        setTiles((List<List<TileType>>)value);
      }
      break;

    case OCCUPIED:
      if (value == null) {
        unsetOccupied();
      } else {
        setOccupied((List<List<Boolean>>)value);
      }
      break;

    case HEIGHT:
      if (value == null) {
        unsetHeight();
      } else {
        setHeight((Integer)value);
      }
      break;

    case WIDTH:
      if (value == null) {
        unsetWidth();
      } else {
        setWidth((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TILES:
      return getTiles();

    case OCCUPIED:
      return getOccupied();

    case HEIGHT:
      return Integer.valueOf(getHeight());

    case WIDTH:
      return Integer.valueOf(getWidth());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TILES:
      return isSetTiles();
    case OCCUPIED:
      return isSetOccupied();
    case HEIGHT:
      return isSetHeight();
    case WIDTH:
      return isSetWidth();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GameMap)
      return this.equals((GameMap)that);
    return false;
  }

  public boolean equals(GameMap that) {
    if (that == null)
      return false;

    boolean this_present_tiles = true && this.isSetTiles();
    boolean that_present_tiles = true && that.isSetTiles();
    if (this_present_tiles || that_present_tiles) {
      if (!(this_present_tiles && that_present_tiles))
        return false;
      if (!this.tiles.equals(that.tiles))
        return false;
    }

    boolean this_present_occupied = true && this.isSetOccupied();
    boolean that_present_occupied = true && that.isSetOccupied();
    if (this_present_occupied || that_present_occupied) {
      if (!(this_present_occupied && that_present_occupied))
        return false;
      if (!this.occupied.equals(that.occupied))
        return false;
    }

    boolean this_present_height = true && this.isSetHeight();
    boolean that_present_height = true && that.isSetHeight();
    if (this_present_height || that_present_height) {
      if (!(this_present_height && that_present_height))
        return false;
      if (this.height != that.height)
        return false;
    }

    boolean this_present_width = true && this.isSetWidth();
    boolean that_present_width = true && that.isSetWidth();
    if (this_present_width || that_present_width) {
      if (!(this_present_width && that_present_width))
        return false;
      if (this.width != that.width)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(GameMap other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    GameMap typedOther = (GameMap)other;

    lastComparison = Boolean.valueOf(isSetTiles()).compareTo(typedOther.isSetTiles());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTiles()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tiles, typedOther.tiles);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOccupied()).compareTo(typedOther.isSetOccupied());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOccupied()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.occupied, typedOther.occupied);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHeight()).compareTo(typedOther.isSetHeight());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeight()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.height, typedOther.height);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWidth()).compareTo(typedOther.isSetWidth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWidth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.width, typedOther.width);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GameMap(");
    boolean first = true;

    if (isSetTiles()) {
      sb.append("tiles:");
      if (this.tiles == null) {
        sb.append("null");
      } else {
        sb.append(this.tiles);
      }
      first = false;
    }
    if (isSetOccupied()) {
      if (!first) sb.append(", ");
      sb.append("occupied:");
      if (this.occupied == null) {
        sb.append("null");
      } else {
        sb.append(this.occupied);
      }
      first = false;
    }
    if (isSetHeight()) {
      if (!first) sb.append(", ");
      sb.append("height:");
      sb.append(this.height);
      first = false;
    }
    if (isSetWidth()) {
      if (!first) sb.append(", ");
      sb.append("width:");
      sb.append(this.width);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GameMapStandardSchemeFactory implements SchemeFactory {
    public GameMapStandardScheme getScheme() {
      return new GameMapStandardScheme();
    }
  }

  private static class GameMapStandardScheme extends StandardScheme<GameMap> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GameMap struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TILES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list34 = iprot.readListBegin();
                struct.tiles = new ArrayList<List<TileType>>(_list34.size);
                for (int _i35 = 0; _i35 < _list34.size; ++_i35)
                {
                  List<TileType> _elem36; // optional
                  {
                    org.apache.thrift.protocol.TList _list37 = iprot.readListBegin();
                    _elem36 = new ArrayList<TileType>(_list37.size);
                    for (int _i38 = 0; _i38 < _list37.size; ++_i38)
                    {
                      TileType _elem39; // optional
                      _elem39 = TileType.findByValue(iprot.readI32());
                      _elem36.add(_elem39);
                    }
                    iprot.readListEnd();
                  }
                  struct.tiles.add(_elem36);
                }
                iprot.readListEnd();
              }
              struct.setTilesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // OCCUPIED
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                struct.occupied = new ArrayList<List<Boolean>>(_list40.size);
                for (int _i41 = 0; _i41 < _list40.size; ++_i41)
                {
                  List<Boolean> _elem42; // optional
                  {
                    org.apache.thrift.protocol.TList _list43 = iprot.readListBegin();
                    _elem42 = new ArrayList<Boolean>(_list43.size);
                    for (int _i44 = 0; _i44 < _list43.size; ++_i44)
                    {
                      boolean _elem45; // optional
                      _elem45 = iprot.readBool();
                      _elem42.add(_elem45);
                    }
                    iprot.readListEnd();
                  }
                  struct.occupied.add(_elem42);
                }
                iprot.readListEnd();
              }
              struct.setOccupiedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // HEIGHT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.height = iprot.readI32();
              struct.setHeightIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // WIDTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.width = iprot.readI32();
              struct.setWidthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GameMap struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.tiles != null) {
        if (struct.isSetTiles()) {
          oprot.writeFieldBegin(TILES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.tiles.size()));
            for (List<TileType> _iter46 : struct.tiles)
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, _iter46.size()));
                for (TileType _iter47 : _iter46)
                {
                  oprot.writeI32(_iter47.getValue());
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.occupied != null) {
        if (struct.isSetOccupied()) {
          oprot.writeFieldBegin(OCCUPIED_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.occupied.size()));
            for (List<Boolean> _iter48 : struct.occupied)
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, _iter48.size()));
                for (boolean _iter49 : _iter48)
                {
                  oprot.writeBool(_iter49);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetHeight()) {
        oprot.writeFieldBegin(HEIGHT_FIELD_DESC);
        oprot.writeI32(struct.height);
        oprot.writeFieldEnd();
      }
      if (struct.isSetWidth()) {
        oprot.writeFieldBegin(WIDTH_FIELD_DESC);
        oprot.writeI32(struct.width);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GameMapTupleSchemeFactory implements SchemeFactory {
    public GameMapTupleScheme getScheme() {
      return new GameMapTupleScheme();
    }
  }

  private static class GameMapTupleScheme extends TupleScheme<GameMap> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GameMap struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTiles()) {
        optionals.set(0);
      }
      if (struct.isSetOccupied()) {
        optionals.set(1);
      }
      if (struct.isSetHeight()) {
        optionals.set(2);
      }
      if (struct.isSetWidth()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetTiles()) {
        {
          oprot.writeI32(struct.tiles.size());
          for (List<TileType> _iter50 : struct.tiles)
          {
            {
              oprot.writeI32(_iter50.size());
              for (TileType _iter51 : _iter50)
              {
                oprot.writeI32(_iter51.getValue());
              }
            }
          }
        }
      }
      if (struct.isSetOccupied()) {
        {
          oprot.writeI32(struct.occupied.size());
          for (List<Boolean> _iter52 : struct.occupied)
          {
            {
              oprot.writeI32(_iter52.size());
              for (boolean _iter53 : _iter52)
              {
                oprot.writeBool(_iter53);
              }
            }
          }
        }
      }
      if (struct.isSetHeight()) {
        oprot.writeI32(struct.height);
      }
      if (struct.isSetWidth()) {
        oprot.writeI32(struct.width);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GameMap struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list54 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
          struct.tiles = new ArrayList<List<TileType>>(_list54.size);
          for (int _i55 = 0; _i55 < _list54.size; ++_i55)
          {
            List<TileType> _elem56; // optional
            {
              org.apache.thrift.protocol.TList _list57 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
              _elem56 = new ArrayList<TileType>(_list57.size);
              for (int _i58 = 0; _i58 < _list57.size; ++_i58)
              {
                TileType _elem59; // optional
                _elem59 = TileType.findByValue(iprot.readI32());
                _elem56.add(_elem59);
              }
            }
            struct.tiles.add(_elem56);
          }
        }
        struct.setTilesIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list60 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
          struct.occupied = new ArrayList<List<Boolean>>(_list60.size);
          for (int _i61 = 0; _i61 < _list60.size; ++_i61)
          {
            List<Boolean> _elem62; // optional
            {
              org.apache.thrift.protocol.TList _list63 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, iprot.readI32());
              _elem62 = new ArrayList<Boolean>(_list63.size);
              for (int _i64 = 0; _i64 < _list63.size; ++_i64)
              {
                boolean _elem65; // optional
                _elem65 = iprot.readBool();
                _elem62.add(_elem65);
              }
            }
            struct.occupied.add(_elem62);
          }
        }
        struct.setOccupiedIsSet(true);
      }
      if (incoming.get(2)) {
        struct.height = iprot.readI32();
        struct.setHeightIsSet(true);
      }
      if (incoming.get(3)) {
        struct.width = iprot.readI32();
        struct.setWidthIsSet(true);
      }
    }
  }

}

