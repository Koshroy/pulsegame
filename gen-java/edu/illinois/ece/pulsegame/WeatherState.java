/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.illinois.ece.pulsegame;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Represents a view of the weather. The turn tells you how out of date it is.
 * Weather conditions are guaranteed to stay constant for at least 3 turns.
 */
public class WeatherState implements org.apache.thrift.TBase<WeatherState, WeatherState._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("WeatherState");

  private static final org.apache.thrift.protocol.TField CONDITION_FIELD_DESC = new org.apache.thrift.protocol.TField("condition", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TURN_FIELD_DESC = new org.apache.thrift.protocol.TField("turn", org.apache.thrift.protocol.TType.I32, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new WeatherStateStandardSchemeFactory());
    schemes.put(TupleScheme.class, new WeatherStateTupleSchemeFactory());
  }

  /**
   * 
   * @see WeatherCond
   */
  public WeatherCond condition; // optional
  public int turn; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see WeatherCond
     */
    CONDITION((short)1, "condition"),
    TURN((short)2, "turn");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CONDITION
          return CONDITION;
        case 2: // TURN
          return TURN;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TURN_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);
  private _Fields optionals[] = {_Fields.CONDITION,_Fields.TURN};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CONDITION, new org.apache.thrift.meta_data.FieldMetaData("condition", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, WeatherCond.class)));
    tmpMap.put(_Fields.TURN, new org.apache.thrift.meta_data.FieldMetaData("turn", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(WeatherState.class, metaDataMap);
  }

  public WeatherState() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public WeatherState(WeatherState other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetCondition()) {
      this.condition = other.condition;
    }
    this.turn = other.turn;
  }

  public WeatherState deepCopy() {
    return new WeatherState(this);
  }

  @Override
  public void clear() {
    this.condition = null;
    setTurnIsSet(false);
    this.turn = 0;
  }

  /**
   * 
   * @see WeatherCond
   */
  public WeatherCond getCondition() {
    return this.condition;
  }

  /**
   * 
   * @see WeatherCond
   */
  public WeatherState setCondition(WeatherCond condition) {
    this.condition = condition;
    return this;
  }

  public void unsetCondition() {
    this.condition = null;
  }

  /** Returns true if field condition is set (has been assigned a value) and false otherwise */
  public boolean isSetCondition() {
    return this.condition != null;
  }

  public void setConditionIsSet(boolean value) {
    if (!value) {
      this.condition = null;
    }
  }

  public int getTurn() {
    return this.turn;
  }

  public WeatherState setTurn(int turn) {
    this.turn = turn;
    setTurnIsSet(true);
    return this;
  }

  public void unsetTurn() {
    __isset_bit_vector.clear(__TURN_ISSET_ID);
  }

  /** Returns true if field turn is set (has been assigned a value) and false otherwise */
  public boolean isSetTurn() {
    return __isset_bit_vector.get(__TURN_ISSET_ID);
  }

  public void setTurnIsSet(boolean value) {
    __isset_bit_vector.set(__TURN_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CONDITION:
      if (value == null) {
        unsetCondition();
      } else {
        setCondition((WeatherCond)value);
      }
      break;

    case TURN:
      if (value == null) {
        unsetTurn();
      } else {
        setTurn((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CONDITION:
      return getCondition();

    case TURN:
      return Integer.valueOf(getTurn());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CONDITION:
      return isSetCondition();
    case TURN:
      return isSetTurn();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof WeatherState)
      return this.equals((WeatherState)that);
    return false;
  }

  public boolean equals(WeatherState that) {
    if (that == null)
      return false;

    boolean this_present_condition = true && this.isSetCondition();
    boolean that_present_condition = true && that.isSetCondition();
    if (this_present_condition || that_present_condition) {
      if (!(this_present_condition && that_present_condition))
        return false;
      if (!this.condition.equals(that.condition))
        return false;
    }

    boolean this_present_turn = true && this.isSetTurn();
    boolean that_present_turn = true && that.isSetTurn();
    if (this_present_turn || that_present_turn) {
      if (!(this_present_turn && that_present_turn))
        return false;
      if (this.turn != that.turn)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(WeatherState other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    WeatherState typedOther = (WeatherState)other;

    lastComparison = Boolean.valueOf(isSetCondition()).compareTo(typedOther.isSetCondition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCondition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.condition, typedOther.condition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTurn()).compareTo(typedOther.isSetTurn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTurn()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.turn, typedOther.turn);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("WeatherState(");
    boolean first = true;

    if (isSetCondition()) {
      sb.append("condition:");
      if (this.condition == null) {
        sb.append("null");
      } else {
        sb.append(this.condition);
      }
      first = false;
    }
    if (isSetTurn()) {
      if (!first) sb.append(", ");
      sb.append("turn:");
      sb.append(this.turn);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class WeatherStateStandardSchemeFactory implements SchemeFactory {
    public WeatherStateStandardScheme getScheme() {
      return new WeatherStateStandardScheme();
    }
  }

  private static class WeatherStateStandardScheme extends StandardScheme<WeatherState> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, WeatherState struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CONDITION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.condition = WeatherCond.findByValue(iprot.readI32());
              struct.setConditionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TURN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.turn = iprot.readI32();
              struct.setTurnIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, WeatherState struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.condition != null) {
        if (struct.isSetCondition()) {
          oprot.writeFieldBegin(CONDITION_FIELD_DESC);
          oprot.writeI32(struct.condition.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTurn()) {
        oprot.writeFieldBegin(TURN_FIELD_DESC);
        oprot.writeI32(struct.turn);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class WeatherStateTupleSchemeFactory implements SchemeFactory {
    public WeatherStateTupleScheme getScheme() {
      return new WeatherStateTupleScheme();
    }
  }

  private static class WeatherStateTupleScheme extends TupleScheme<WeatherState> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, WeatherState struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCondition()) {
        optionals.set(0);
      }
      if (struct.isSetTurn()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetCondition()) {
        oprot.writeI32(struct.condition.getValue());
      }
      if (struct.isSetTurn()) {
        oprot.writeI32(struct.turn);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, WeatherState struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.condition = WeatherCond.findByValue(iprot.readI32());
        struct.setConditionIsSet(true);
      }
      if (incoming.get(1)) {
        struct.turn = iprot.readI32();
        struct.setTurnIsSet(true);
      }
    }
  }

}

