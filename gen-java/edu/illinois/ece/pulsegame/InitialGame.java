/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.illinois.ece.pulsegame;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class InitialGame implements org.apache.thrift.TBase<InitialGame, InitialGame._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("InitialGame");

  private static final org.apache.thrift.protocol.TField TOK_FIELD_DESC = new org.apache.thrift.protocol.TField("tok", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField GAME_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("gameMap", org.apache.thrift.protocol.TType.STRUCT, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new InitialGameStandardSchemeFactory());
    schemes.put(TupleScheme.class, new InitialGameTupleSchemeFactory());
  }

  /**
   * needed to authenticate all future operations
   */
  public long tok; // optional
  public State state; // optional
  /**
   * player id; will be 0 or 1
   */
  public int pid; // optional
  /**
   * the game map will only be given once in this struct
   */
  public GameMap gameMap; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * needed to authenticate all future operations
     */
    TOK((short)1, "tok"),
    STATE((short)2, "state"),
    /**
     * player id; will be 0 or 1
     */
    PID((short)3, "pid"),
    /**
     * the game map will only be given once in this struct
     */
    GAME_MAP((short)4, "gameMap");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TOK
          return TOK;
        case 2: // STATE
          return STATE;
        case 3: // PID
          return PID;
        case 4: // GAME_MAP
          return GAME_MAP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TOK_ISSET_ID = 0;
  private static final int __PID_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);
  private _Fields optionals[] = {_Fields.TOK,_Fields.STATE,_Fields.PID,_Fields.GAME_MAP};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TOK, new org.apache.thrift.meta_data.FieldMetaData("tok", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "Token")));
    tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, State.class)));
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.GAME_MAP, new org.apache.thrift.meta_data.FieldMetaData("gameMap", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GameMap.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(InitialGame.class, metaDataMap);
  }

  public InitialGame() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public InitialGame(InitialGame other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.tok = other.tok;
    if (other.isSetState()) {
      this.state = new State(other.state);
    }
    this.pid = other.pid;
    if (other.isSetGameMap()) {
      this.gameMap = new GameMap(other.gameMap);
    }
  }

  public InitialGame deepCopy() {
    return new InitialGame(this);
  }

  @Override
  public void clear() {
    setTokIsSet(false);
    this.tok = 0;
    this.state = null;
    setPidIsSet(false);
    this.pid = 0;
    this.gameMap = null;
  }

  /**
   * needed to authenticate all future operations
   */
  public long getTok() {
    return this.tok;
  }

  /**
   * needed to authenticate all future operations
   */
  public InitialGame setTok(long tok) {
    this.tok = tok;
    setTokIsSet(true);
    return this;
  }

  public void unsetTok() {
    __isset_bit_vector.clear(__TOK_ISSET_ID);
  }

  /** Returns true if field tok is set (has been assigned a value) and false otherwise */
  public boolean isSetTok() {
    return __isset_bit_vector.get(__TOK_ISSET_ID);
  }

  public void setTokIsSet(boolean value) {
    __isset_bit_vector.set(__TOK_ISSET_ID, value);
  }

  public State getState() {
    return this.state;
  }

  public InitialGame setState(State state) {
    this.state = state;
    return this;
  }

  public void unsetState() {
    this.state = null;
  }

  /** Returns true if field state is set (has been assigned a value) and false otherwise */
  public boolean isSetState() {
    return this.state != null;
  }

  public void setStateIsSet(boolean value) {
    if (!value) {
      this.state = null;
    }
  }

  /**
   * player id; will be 0 or 1
   */
  public int getPid() {
    return this.pid;
  }

  /**
   * player id; will be 0 or 1
   */
  public InitialGame setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bit_vector.clear(__PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return __isset_bit_vector.get(__PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bit_vector.set(__PID_ISSET_ID, value);
  }

  /**
   * the game map will only be given once in this struct
   */
  public GameMap getGameMap() {
    return this.gameMap;
  }

  /**
   * the game map will only be given once in this struct
   */
  public InitialGame setGameMap(GameMap gameMap) {
    this.gameMap = gameMap;
    return this;
  }

  public void unsetGameMap() {
    this.gameMap = null;
  }

  /** Returns true if field gameMap is set (has been assigned a value) and false otherwise */
  public boolean isSetGameMap() {
    return this.gameMap != null;
  }

  public void setGameMapIsSet(boolean value) {
    if (!value) {
      this.gameMap = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TOK:
      if (value == null) {
        unsetTok();
      } else {
        setTok((Long)value);
      }
      break;

    case STATE:
      if (value == null) {
        unsetState();
      } else {
        setState((State)value);
      }
      break;

    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case GAME_MAP:
      if (value == null) {
        unsetGameMap();
      } else {
        setGameMap((GameMap)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TOK:
      return Long.valueOf(getTok());

    case STATE:
      return getState();

    case PID:
      return Integer.valueOf(getPid());

    case GAME_MAP:
      return getGameMap();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TOK:
      return isSetTok();
    case STATE:
      return isSetState();
    case PID:
      return isSetPid();
    case GAME_MAP:
      return isSetGameMap();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof InitialGame)
      return this.equals((InitialGame)that);
    return false;
  }

  public boolean equals(InitialGame that) {
    if (that == null)
      return false;

    boolean this_present_tok = true && this.isSetTok();
    boolean that_present_tok = true && that.isSetTok();
    if (this_present_tok || that_present_tok) {
      if (!(this_present_tok && that_present_tok))
        return false;
      if (this.tok != that.tok)
        return false;
    }

    boolean this_present_state = true && this.isSetState();
    boolean that_present_state = true && that.isSetState();
    if (this_present_state || that_present_state) {
      if (!(this_present_state && that_present_state))
        return false;
      if (!this.state.equals(that.state))
        return false;
    }

    boolean this_present_pid = true && this.isSetPid();
    boolean that_present_pid = true && that.isSetPid();
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_gameMap = true && this.isSetGameMap();
    boolean that_present_gameMap = true && that.isSetGameMap();
    if (this_present_gameMap || that_present_gameMap) {
      if (!(this_present_gameMap && that_present_gameMap))
        return false;
      if (!this.gameMap.equals(that.gameMap))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(InitialGame other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    InitialGame typedOther = (InitialGame)other;

    lastComparison = Boolean.valueOf(isSetTok()).compareTo(typedOther.isSetTok());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTok()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tok, typedOther.tok);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetState()).compareTo(typedOther.isSetState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, typedOther.state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPid()).compareTo(typedOther.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, typedOther.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGameMap()).compareTo(typedOther.isSetGameMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGameMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gameMap, typedOther.gameMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("InitialGame(");
    boolean first = true;

    if (isSetTok()) {
      sb.append("tok:");
      sb.append(this.tok);
      first = false;
    }
    if (isSetState()) {
      if (!first) sb.append(", ");
      sb.append("state:");
      if (this.state == null) {
        sb.append("null");
      } else {
        sb.append(this.state);
      }
      first = false;
    }
    if (isSetPid()) {
      if (!first) sb.append(", ");
      sb.append("pid:");
      sb.append(this.pid);
      first = false;
    }
    if (isSetGameMap()) {
      if (!first) sb.append(", ");
      sb.append("gameMap:");
      if (this.gameMap == null) {
        sb.append("null");
      } else {
        sb.append(this.gameMap);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class InitialGameStandardSchemeFactory implements SchemeFactory {
    public InitialGameStandardScheme getScheme() {
      return new InitialGameStandardScheme();
    }
  }

  private static class InitialGameStandardScheme extends StandardScheme<InitialGame> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, InitialGame struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TOK
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.tok = iprot.readI64();
              struct.setTokIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.state = new State();
              struct.state.read(iprot);
              struct.setStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // GAME_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.gameMap = new GameMap();
              struct.gameMap.read(iprot);
              struct.setGameMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, InitialGame struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetTok()) {
        oprot.writeFieldBegin(TOK_FIELD_DESC);
        oprot.writeI64(struct.tok);
        oprot.writeFieldEnd();
      }
      if (struct.state != null) {
        if (struct.isSetState()) {
          oprot.writeFieldBegin(STATE_FIELD_DESC);
          struct.state.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetPid()) {
        oprot.writeFieldBegin(PID_FIELD_DESC);
        oprot.writeI32(struct.pid);
        oprot.writeFieldEnd();
      }
      if (struct.gameMap != null) {
        if (struct.isSetGameMap()) {
          oprot.writeFieldBegin(GAME_MAP_FIELD_DESC);
          struct.gameMap.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class InitialGameTupleSchemeFactory implements SchemeFactory {
    public InitialGameTupleScheme getScheme() {
      return new InitialGameTupleScheme();
    }
  }

  private static class InitialGameTupleScheme extends TupleScheme<InitialGame> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, InitialGame struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTok()) {
        optionals.set(0);
      }
      if (struct.isSetState()) {
        optionals.set(1);
      }
      if (struct.isSetPid()) {
        optionals.set(2);
      }
      if (struct.isSetGameMap()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetTok()) {
        oprot.writeI64(struct.tok);
      }
      if (struct.isSetState()) {
        struct.state.write(oprot);
      }
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetGameMap()) {
        struct.gameMap.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, InitialGame struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.tok = iprot.readI64();
        struct.setTokIsSet(true);
      }
      if (incoming.get(1)) {
        struct.state = new State();
        struct.state.read(iprot);
        struct.setStateIsSet(true);
      }
      if (incoming.get(2)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(3)) {
        struct.gameMap = new GameMap();
        struct.gameMap.read(iprot);
        struct.setGameMapIsSet(true);
      }
    }
  }

}

